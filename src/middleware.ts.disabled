import { NextRequest, NextResponse } from "next/server";

export default async function middleware(request: NextRequest) {
  // Get the URL of the requested page
  const { pathname } = request.nextUrl;

  // Check if the pathname starts with any of these paths that should always be accessible
  if (
    pathname.startsWith("/_next") || // Next.js static files
    pathname.startsWith("/api/auth") || // Auth API routes
    pathname.startsWith("/public") || // Public assets
    pathname === "/favicon.ico" // Favicon
  ) {
    return NextResponse.next();
  }

  // Add debug logging
  console.log("Checking auth for path:", pathname);
  console.log("Cookies:", Object.fromEntries(request.cookies.getAll().map(c => [c.name, c.value])));
  
  // Check for session token or JWT cookie (Next Auth typically uses one of these)
  const hasSessionToken = request.cookies.has("next-auth.session-token");
  const hasJWT = request.cookies.has("__Secure-next-auth.session-token") || request.cookies.has("__Host-next-auth.session-token");
  
  const isAuthenticated = hasSessionToken || hasJWT;
  console.log("Authentication status:", isAuthenticated ? "Authenticated" : "Not authenticated");

  // If not authenticated, redirect to the sign-in page
  if (!isAuthenticated) {
    console.log("Redirecting to sign-in");
    const signInUrl = new URL("/api/auth/signin", request.url);
    signInUrl.searchParams.set("callbackUrl", pathname);
    return NextResponse.redirect(signInUrl);
  }

  console.log("User authenticated, proceeding");
  // User is authenticated, allow access to the page
  return NextResponse.next();
}

// Configure which paths the middleware runs on
export const config = {
  matcher: ["/((?!api/auth|_next/static|_next/image|favicon.ico).*)"],
};
